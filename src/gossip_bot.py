from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from config import Config
import random

# todo load from storage
lbg_people = []

coreteam_people = [
    'eltagun',
    'vskruta',
    'vtrachenaa',
    'komarivna',
    'shikouno',
    'OlhaVernik',
    'golomovzaa',
    'Vurchun',
    'dia_me_tr',
    'NAST_0111',
    'kseniyayaya',
    'valeriya_akmn',
    'SiNn_maks',
]

gossip_starts = [
    "–Ø —Ç—É—Ç —Ç–∞–∫–µ –ø–æ—á—É–≤",
    "–¢—É—Ç —Ö–æ–¥—è—Ç—å —á—É—Ç–∫–∏, —â–æ",
    "–¢–∏ –Ω–µ –ø–æ–≤—ñ—Ä–∏—à, –∞–ª–µ",
    "–°–ª—É—Ö–∞–π, —â–æ —è –¥—ñ–∑–Ω–∞–≤—Å—è",
]

config = Config()

# Command handler for '/start'
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if access_granted(update):
        await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ –≤ —á–∞—Ç.")
    else:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")

# Command handler for '/help'
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = \
    """
        –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—ñ, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ —É –æ–±—Ä–∞–Ω–∏–π —á–∞—Ç.\n
        –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @eltagun.
    """
    await update.message.reply_text(text)

# Command handler for '/enable'
async def enable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat.type == 'group' and not update.effective_chat.type == 'supergroup':
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")
        return

    if not access_granted(update):
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    config.set_forvarding(True)
    await update.message.reply_text("–ë–æ—Ç–∞ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ!")

# Command handler for '/disable'
async def disable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat.type == 'group' and not update.effective_chat.type == 'supergroup':
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")
        return

    if not access_granted(update):
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    config.set_forvarding(False)
    await update.message.reply_text("–ë–æ—Ç–∞ –≤–∏–º–∫–Ω–µ–Ω–æ!")

# # Command handler for '/chat_id'
# async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     chat_id = update.effective_chat.id
#     title = update.effective_chat.title

#     # todo catch exceptions
#     # todo timeout
#     await update.message.reply_text(
#         f"Chat ID: `{chat_id}`. Type: `{title}`",
#         parse_mode='Markdown')

def access_granted(update: Update) -> bool:
    if not config.is_access_check_enable():
        return True

    user_tag = update.effective_user.username
    if user_tag in coreteam_people:
        return True

    if user_tag in lbg_people:
        return True
    return False

# Message handler for forwarding messages
async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not access_granted(update):
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –≥–æ—Å—ñ–ø—ñ–≤ ü•≤")
        return

    start_msg = random.choice(gossip_starts)
    text = f"üó£Ô∏è <b>{start_msg}</b>\n<blockquote>{update.message.text}</blockquote>"

    # todo catch exceptions
    # todo timeout
    if config.is_forwarding_enable():
        await context.bot.send_message(
            chat_id=config.get_chat_id(),
            text=text,
            parse_mode='HTML')
        await update.message.reply_text("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    else:
        await update.message.reply_text("–ë–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ –±—É–ª–æ –≤–∏–º–∫–Ω–µ–Ω–æ!")

def main():
    application = ApplicationBuilder().token(config.get_access_token()).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("enable", enable))
    application.add_handler(CommandHandler("disable", disable))

    # tbd /set_public_password

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_message))

    application.run_polling()

if __name__ == "__main__":
    main()
